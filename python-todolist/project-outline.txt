====== TO DO LIST ======
# Starting Menu
1. Add Tasks
2. Show Tasks
3. Mark tasks as done
4. Delete tasks
5. Exit
Enter your choice: 

-----------------------------------------------------------
#Adding tasks section

//depending on user number input, it'll keep going to add as many tasks as they want
//It becomes a dictionary due to the key:value pair - the task and then the input of said task.
        //by adding bool to the done key, it states that it's Not Done / false.

IF choice is equal to '1' THEN 
    PRINT a blank line
    WHILE True:
    TRY:
        CREATE variable n_tasks to STORE following PROMPT
            PROMPT user for the number of tasks to add 
            IF user inputs an integer:
                EXIT while loop and continues the program
    EXCEPT ValueError:
        PRINT "Please enter a valid number."

    FOR i FROM range of n_tasks DO
        CREATE variable task to STORE following PROMPT
            PROMPT user to enter task description
        APPEND a dictionary with the task and its status (not done) to the list

//Once loop finishes, return to main Menu

------------------------------------------------------------
#Show tasks function
// Sorted in descending order 
// Shows tasks that arent done and are done
// Shows tasks that haven't been deleted

ADD tasks parameter to showing_tasks function, passes 
    the tasks argument to function so it can use its information.


ELIF choice is 2
    FOR each index and task in the list of tasks:
        IF the task (dictionary) is marked as done:
            SET status to "Done"
        ELSE:
            SET the status to "Not Done"
        FOR each task in the list of tasks:
            Calculate the current index plus 1
            Retrieve the task description from current task
            Get the status of the current task
            PRINT the index, task description, and status in the desired format.


1. 'Task' - Not done
2. 'Task' - Done
3.
etc

//Once loop finishes, return to main Menu

-----------------------------------------------------------
#Marking tasks as done function

ELIF the user's choice is '3'
    PROMPT the user to enter the task no. to mark as done and convert it
    SUBTRACT 1 from the task no. to get correct index
    IF the index is within the valid range 
        MARK task at given index as "done"
        PRINT message "Task marked as done."
    ELSE
        PRINT "Invalid task number."


//Input
Enter the task number to mark as done: 
//Print
Task marked as done!
//Once loop finishes, return to main Menu

-----------------------------------------------------------
#Deleting tasks function

ELIF the choice is '4'
    PROMPT the user to enter the task no. they want to delete
    SUBTRACT 1 from the task list
        IF the index is within a valid range (0 to length of task list)
            REMOVE the task at given index from task list
            MARK task at given index as "Deleted"
        ELSE
            PRINT "Invalid task number."

//Input
Enter the task numbers you wish to delete:

//Print
These tasks have been deleted.
//Once loop finishes, return to main Menu

Reference:
https://pub.aimind.so/creating-a-simple-to-do-list-in-python-c0f52ab15814

Problems encountered:
1. Didn't know how to call the function when I made it via console so had to research how and why

2. I need the Show List to appear once more again when someone's deleting a task so its more intuitive.
Solution: Put the index and task description variables and stored it all into a task_list to make it do this.
Other solution: Unnecessary i think.

3. Wanted to have f string to say the specific task has been removed but when i do {task} it just gives me the full "task": task, "done": False. Need to figure this out.
Solution: Added the in keyword to check if the deleted_task is found in tasks. This will allow me to do a format string to see the task description.

4. Add a way for users to be able to select a range of numbers on the task list to be marked as done.
Solution: ?

5. Find ways to allow user to mark multiple tasks as done
Solution: ?

6. Feedback from user stated that they received an error in the Adding task section when they inputted string characters rather than integers.
Solution: Added a try-except block to redirect user to input integers/numbers

7. How to add file handling so to-do list can retrieve tasks from file memory 
from last user input before they shut the program. How to store it in directory.

Solution: ?

8. Make more functions rather than grouping them up in def main():
Solution: Create a separate functions file?

Other functionalities:
1. Add reminders to do tasks - push notifications
2 Add priorities to each task
3. Add end dates to each task
4. Add emojis (for fun)
5. Ability to share tasks to others
6. Add sound effects to buttons
7. Add more task descriptions rather than just one statement

