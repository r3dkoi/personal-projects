DEFINE function as main() #This is where I will hold the entire program
    CREATE list called tasks, which will store the values inputted by user

    WHILE condition is True DO #Program continues until user inputs a value
        PRINT new line "==== TO DO LIST ===="
        PRINT new line "Welcome to the Main Menu"
        PRINT "1. Add tasks"
        PRINT "2. Show tasks"
        PRINT "3. Delete tasks"
        PRINT "4. Mark tests as done"
        PRINT "5. Exit"
        PROMPT user to input a integer "Choose a number to begin: "

        #Creating separate functions for each option for better readability
            TRY DO
                IF choice is equal to 1 DO
                    adding_tasks function with tasks
                ELIF choice is equal to 2 DO  
                    show_tasks function with tasks
                ELIF choice is equal to 3 DO
                    delete_tasks function with tasks
                ELIF choice is equal to 4 DO
                    marking_tests function with tasks
                ELIF choice is equal to 5 DO
                    exit function with tasks
                ELSE DO
                    PRINT "Please choose from the options above only. Thank you."
            EXCEPT ValueError DO
                PRINT "Please enter a valid number only, not whatever you just did. Thanks :)"

# CORE FUNCTIONS / FOR THE functions.py

### ADDING TASKS ###
// Adding tasks as a parameter means that this function will be using the values inside the tasks list []
DEFINE function as adding_tasks with parameter tasks DO
    PRINT new line "==== ADDING TASKS ====="
    //this keeps this section of the program going until user gives valid input
    WHILE True DO
        TRY:
            CREATE n_tasks to STORE following PROMPT THEN
                PROMPT user to input as a integer "How many tasks would you like to add: "
                IF user inputs integer THEN
                    EXIT while loop and continue program
        EXCEPT ValueError:
            PRINT "Please enter a valid number."
    //Creates a task list that ends on the amount the user had given
    FOR i IN range of n_tasks DO
        CREATE variable task to STORE following PROMPT THEN
            PROMPT user to enter task description. Input should be case-insensitive.
        APPEND task to tasks as a dictionary with task description and its status as not done (false).
        tasks.append({Task: task, done: false})


### SHOW TASK LIST ###
// Adding tasks as a parameter means that this function will be using the values inside the tasks list []
DEFINE function as showing_tasks with parameter tasks DO
    PRINT new line "=== SHOW TASK LIST ==="
    IF tasks is empty THEN
        PRINT "No tasks to show."
    ELSE DO
    PRINT "Your current tasks: "
    //Enumerate method is used here since I want to show the index and task in the list
    FOR EACH index, task IN enumerate(tasks) DO
        IF task has value of done DO
             CREATE variable status and STORE "Done"
        ELSE:
            CREATE variable status and STORE "Not done"
    
        CREATE variable current_index and STORE index + 1 
            #Takes the task value from adding_tasks function
        CREATE variable task_description and STORE
            task and ACCESS only the "Tasks" from the dictionary.
            #F-string to input the values from index, task, and done
        PRINT ("current_index. Task: task_description. Status: status")

### DELETE TASKS ###
DEFINE function as deleting_tasks with parameter (tasks) DO
    PRINT new line "=== DELETE TASKS ==="
    IF tasks is empty DO
        PRINT "No tasks to delete."
    ELSE DO
            TRY DO
            CREATE task_deleted variable and STORE 
                PROMPT user to input a integer "Choose the task's number that you wish to delete: "
             IF task_deleted is greater than or equal to 0 AND less than the LENGTH of tasks
                CREATE variable deleted_task_display and STORE
                    ACCESS the tasks list and specify task_deleted is being selected, and the "Task" value being selected.
                    DELETE the task_deleted value from tasks list #Removes specified index from the list
                    PRINT "The task: deleted_task_display has been deleted."
        
                END
            EXCEPT ValueError DO
                PRINT "Please select a valid number from the task list."
        
### MARKING TASKS ###
DEFINE function as marking_tasks with parameter tasks
    PRINT new line "=== MARKING TASKS ==="
    IF tasks is empty DO
        PRINT "No tasks to mark as complete."
        TRY DO
            CREATE marked_task variable THEN
                PROMPT user to input a integer "Choose the task number you wish to mark as complete: "
            IF marked_task is greater than 0 AND is less than tasks list DO
                PRINT format string "Task: task_description is marked as complete. Well done."
                ACCESS tasks list and select marked_task and the key "done" THEN
                    SET as True
            ELSE DO
                PRINT "Invalid task number"
        EXCEPT ValueError DO
            PRINT "Please select a valid number from the task list."

### EXIT ###
DEFINE function as exit, no parameters needed
    PRINT new line "=== EXIT ==="
    PRINT "Thank you for using this program!"
    PRINT "See you later :)."
        END 
        




